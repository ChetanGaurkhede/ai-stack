version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aistack-postgres
    environment:
      POSTGRES_DB: aistack
      POSTGRES_USER: aistack_user
      POSTGRES_PASSWORD: aistack_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aistack_user -d aistack"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aistack-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: aistack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aistack-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aistack-backend
    environment:
      - DATABASE_URL=postgresql://aistack_user:aistack_password@postgres:5432/aistack
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SERPAPI_API_KEY=${SERPAPI_API_KEY}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=false
    volumes:
      - ./uploads:/app/uploads
      - ./chroma_db:/app/chroma_db
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aistack-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: aistack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - aistack-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  aistack-network:
    driver: bridge 